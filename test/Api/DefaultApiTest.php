<?php
/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Onfido\Test\Api;

use \Onfido\Configuration;
use \Onfido\ApiException;
use \Onfido\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelReport
     *
     * This endpoint is for cancelling individual paused reports..
     *
     */
    public function testCancelReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for completeTask
     *
     * Completes a Send / Receive Data task..
     *
     */
    public function testCompleteTask()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createApplicant
     *
     * Create Applicant.
     *
     */
    public function testCreateApplicant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createCheck
     *
     * Create a check.
     *
     */
    public function testCreateCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWatchlistMonitor
     *
     * Creates a new monitor for the applicant.
     *
     */
    public function testCreateWatchlistMonitor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebhook
     *
     * Create a webhook.
     *
     */
    public function testCreateWebhook()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWorkflowRun
     *
     * Create a Workflow Run..
     *
     */
    public function testCreateWorkflowRun()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteApplicant
     *
     * Delete Applicant.
     *
     */
    public function testDeleteApplicant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWatchlistMonitor
     *
     * Deactivates the given monitor.
     *
     */
    public function testDeleteWatchlistMonitor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebhook
     *
     * Delete a webhook.
     *
     */
    public function testDeleteWebhook()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadCheck
     *
     * Download raw data for a check.
     *
     */
    public function testDownloadCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadDocument
     *
     * Download raw data for a document.
     *
     */
    public function testDownloadDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadDocumentVideo
     *
     * Download a documents raw data.
     *
     */
    public function testDownloadDocumentVideo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadIdPhoto
     *
     * Download ID photo.
     *
     */
    public function testDownloadIdPhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadLivePhoto
     *
     * Download live photo.
     *
     */
    public function testDownloadLivePhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadLiveVideo
     *
     * Download live video.
     *
     */
    public function testDownloadLiveVideo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadLiveVideoFrame
     *
     * Download live video frame.
     *
     */
    public function testDownloadLiveVideoFrame()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadMotionCapture
     *
     * Download motion capture.
     *
     */
    public function testDownloadMotionCapture()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadMotionCaptureFrame
     *
     * Download motion capture frame.
     *
     */
    public function testDownloadMotionCaptureFrame()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadSignedEvidenceFile
     *
     * Retrieves the signed evidence file for the designated Workflow Run.
     *
     */
    public function testDownloadSignedEvidenceFile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for extract
     *
     * Extract information from a document.
     *
     */
    public function testExtract()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findAddresses
     *
     * Search for addresses by postcode.
     *
     */
    public function testFindAddresses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findApplicant
     *
     * Retrieve Applicant.
     *
     */
    public function testFindApplicant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findCheck
     *
     * Retrieve a Check.
     *
     */
    public function testFindCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findDocument
     *
     * A single document can be retrieved by calling this endpoint with the document's unique identifier..
     *
     */
    public function testFindDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findIdPhoto
     *
     * Retrieve ID photo.
     *
     */
    public function testFindIdPhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findLivePhoto
     *
     * Retrieve live photo.
     *
     */
    public function testFindLivePhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findLiveVideo
     *
     * Retrieve live video.
     *
     */
    public function testFindLiveVideo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findMotionCapture
     *
     * Retrieve motion capture.
     *
     */
    public function testFindMotionCapture()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findReport
     *
     * A single report can be retrieved using this endpoint with the corresponding unique identifier..
     *
     */
    public function testFindReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findTask
     *
     * A single task can be retrieved by calling this endpoint with the unique identifier of the Task and Workflow Run..
     *
     */
    public function testFindTask()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findWatchlistMonitor
     *
     * Retrieves a single monitor.
     *
     */
    public function testFindWatchlistMonitor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findWebhook
     *
     * Retrieve a Webhook.
     *
     */
    public function testFindWebhook()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findWorkflowRun
     *
     * A single workflow run can be retrieved by calling this endpoint with the unique identifier of the Workflow Run..
     *
     */
    public function testFindWorkflowRun()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for forceNewRecordCreation
     *
     * Force new report creation (BETA).
     *
     */
    public function testForceNewRecordCreation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateSdkToken
     *
     * Generate a SDK token.
     *
     */
    public function testGenerateSdkToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listApplicants
     *
     * List Applicants.
     *
     */
    public function testListApplicants()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listChecks
     *
     * Retrieve Checks.
     *
     */
    public function testListChecks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listDocuments
     *
     * List documents.
     *
     */
    public function testListDocuments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listIdPhotos
     *
     * List ID photos.
     *
     */
    public function testListIdPhotos()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listLivePhotos
     *
     * List live photos.
     *
     */
    public function testListLivePhotos()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listLiveVideos
     *
     * List live videos.
     *
     */
    public function testListLiveVideos()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listMotionCaptures
     *
     * List motion captures.
     *
     */
    public function testListMotionCaptures()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listRepeatAttempts
     *
     * Returns all repeat attempts for a given Document report..
     *
     */
    public function testListRepeatAttempts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listReports
     *
     * All the reports belonging to a particular check can be listed from this endpoint..
     *
     */
    public function testListReports()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listTasks
     *
     * The tasks of a Workflow can be retrieved by calling this endpoint with the unique identifier of the Workflow Run..
     *
     */
    public function testListTasks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWatchlistMonitorMatches
     *
     * List match IDs on this monitor, as well as their enabled/disabled status.
     *
     */
    public function testListWatchlistMonitorMatches()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWatchlistMonitors
     *
     * List all available monitors for an applicant.
     *
     */
    public function testListWatchlistMonitors()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWebhooks
     *
     * List webhooks.
     *
     */
    public function testListWebhooks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWorkflowRuns
     *
     * List Workflow Runs..
     *
     */
    public function testListWorkflowRuns()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for ping
     *
     * Run a health check on the Onfido API.
     *
     */
    public function testPing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postResultsFeedback
     *
     * Create Feedback on checks and reports (ALPHA).
     *
     */
    public function testPostResultsFeedback()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resendWebhooks
     *
     * Resends webhooks.
     *
     */
    public function testResendWebhooks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restoreApplicant
     *
     * Restore Applicant.
     *
     */
    public function testRestoreApplicant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resumeCheck
     *
     * Resume a Check.
     *
     */
    public function testResumeCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resumeReport
     *
     * This endpoint is for resuming individual paused reports..
     *
     */
    public function testResumeReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateApplicant
     *
     * Update Applicant.
     *
     */
    public function testUpdateApplicant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateMonitorMatch
     *
     * Update the status of the given matches..
     *
     */
    public function testUpdateMonitorMatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebhook
     *
     * Edit a webhook.
     *
     */
    public function testUpdateWebhook()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadDocument
     *
     * Upload a document.
     *
     */
    public function testUploadDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadIdPhoto
     *
     * Upload ID photo.
     *
     */
    public function testUploadIdPhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadLivePhoto
     *
     * Upload live photo.
     *
     */
    public function testUploadLivePhoto()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
