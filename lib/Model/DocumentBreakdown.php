<?php
/**
 * DocumentBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * DocumentBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'document_breakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_comparison' => '\Onfido\Model\DocumentBreakdownDataComparison',
        'data_validation' => '\Onfido\Model\DocumentBreakdownDataValidation',
        'image_integrity' => '\Onfido\Model\DocumentBreakdownImageIntegrity',
        'visual_authenticity' => '\Onfido\Model\DocumentBreakdownVisualAuthenticity',
        'data_consistency' => '\Onfido\Model\DocumentBreakdownDataConsistency',
        'police_record' => '\Onfido\Model\DocumentBreakdownPoliceRecord',
        'compromised_document' => '\Onfido\Model\DocumentBreakdownCompromisedDocument',
        'age_validation' => '\Onfido\Model\DocumentBreakdownAgeValidation',
        'issuing_authority' => '\Onfido\Model\DocumentBreakdownIssuingAuthority'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_comparison' => null,
        'data_validation' => null,
        'image_integrity' => null,
        'visual_authenticity' => null,
        'data_consistency' => null,
        'police_record' => null,
        'compromised_document' => null,
        'age_validation' => null,
        'issuing_authority' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_comparison' => false,
        'data_validation' => false,
        'image_integrity' => false,
        'visual_authenticity' => false,
        'data_consistency' => false,
        'police_record' => false,
        'compromised_document' => false,
        'age_validation' => false,
        'issuing_authority' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_comparison' => 'data_comparison',
        'data_validation' => 'data_validation',
        'image_integrity' => 'image_integrity',
        'visual_authenticity' => 'visual_authenticity',
        'data_consistency' => 'data_consistency',
        'police_record' => 'police_record',
        'compromised_document' => 'compromised_document',
        'age_validation' => 'age_validation',
        'issuing_authority' => 'issuing_authority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_comparison' => 'setDataComparison',
        'data_validation' => 'setDataValidation',
        'image_integrity' => 'setImageIntegrity',
        'visual_authenticity' => 'setVisualAuthenticity',
        'data_consistency' => 'setDataConsistency',
        'police_record' => 'setPoliceRecord',
        'compromised_document' => 'setCompromisedDocument',
        'age_validation' => 'setAgeValidation',
        'issuing_authority' => 'setIssuingAuthority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_comparison' => 'getDataComparison',
        'data_validation' => 'getDataValidation',
        'image_integrity' => 'getImageIntegrity',
        'visual_authenticity' => 'getVisualAuthenticity',
        'data_consistency' => 'getDataConsistency',
        'police_record' => 'getPoliceRecord',
        'compromised_document' => 'getCompromisedDocument',
        'age_validation' => 'getAgeValidation',
        'issuing_authority' => 'getIssuingAuthority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_comparison', $data ?? [], null);
        $this->setIfExists('data_validation', $data ?? [], null);
        $this->setIfExists('image_integrity', $data ?? [], null);
        $this->setIfExists('visual_authenticity', $data ?? [], null);
        $this->setIfExists('data_consistency', $data ?? [], null);
        $this->setIfExists('police_record', $data ?? [], null);
        $this->setIfExists('compromised_document', $data ?? [], null);
        $this->setIfExists('age_validation', $data ?? [], null);
        $this->setIfExists('issuing_authority', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_comparison
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparison|null
     */
    public function getDataComparison()
    {
        return $this->container['data_comparison'];
    }

    /**
     * Sets data_comparison
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparison|null $data_comparison data_comparison
     *
     * @return self
     */
    public function setDataComparison($data_comparison)
    {
        if (is_null($data_comparison)) {
            throw new \InvalidArgumentException('non-nullable data_comparison cannot be null');
        }
        $this->container['data_comparison'] = $data_comparison;

        return $this;
    }

    /**
     * Gets data_validation
     *
     * @return \Onfido\Model\DocumentBreakdownDataValidation|null
     */
    public function getDataValidation()
    {
        return $this->container['data_validation'];
    }

    /**
     * Sets data_validation
     *
     * @param \Onfido\Model\DocumentBreakdownDataValidation|null $data_validation data_validation
     *
     * @return self
     */
    public function setDataValidation($data_validation)
    {
        if (is_null($data_validation)) {
            throw new \InvalidArgumentException('non-nullable data_validation cannot be null');
        }
        $this->container['data_validation'] = $data_validation;

        return $this;
    }

    /**
     * Gets image_integrity
     *
     * @return \Onfido\Model\DocumentBreakdownImageIntegrity|null
     */
    public function getImageIntegrity()
    {
        return $this->container['image_integrity'];
    }

    /**
     * Sets image_integrity
     *
     * @param \Onfido\Model\DocumentBreakdownImageIntegrity|null $image_integrity image_integrity
     *
     * @return self
     */
    public function setImageIntegrity($image_integrity)
    {
        if (is_null($image_integrity)) {
            throw new \InvalidArgumentException('non-nullable image_integrity cannot be null');
        }
        $this->container['image_integrity'] = $image_integrity;

        return $this;
    }

    /**
     * Gets visual_authenticity
     *
     * @return \Onfido\Model\DocumentBreakdownVisualAuthenticity|null
     */
    public function getVisualAuthenticity()
    {
        return $this->container['visual_authenticity'];
    }

    /**
     * Sets visual_authenticity
     *
     * @param \Onfido\Model\DocumentBreakdownVisualAuthenticity|null $visual_authenticity visual_authenticity
     *
     * @return self
     */
    public function setVisualAuthenticity($visual_authenticity)
    {
        if (is_null($visual_authenticity)) {
            throw new \InvalidArgumentException('non-nullable visual_authenticity cannot be null');
        }
        $this->container['visual_authenticity'] = $visual_authenticity;

        return $this;
    }

    /**
     * Gets data_consistency
     *
     * @return \Onfido\Model\DocumentBreakdownDataConsistency|null
     */
    public function getDataConsistency()
    {
        return $this->container['data_consistency'];
    }

    /**
     * Sets data_consistency
     *
     * @param \Onfido\Model\DocumentBreakdownDataConsistency|null $data_consistency data_consistency
     *
     * @return self
     */
    public function setDataConsistency($data_consistency)
    {
        if (is_null($data_consistency)) {
            throw new \InvalidArgumentException('non-nullable data_consistency cannot be null');
        }
        $this->container['data_consistency'] = $data_consistency;

        return $this;
    }

    /**
     * Gets police_record
     *
     * @return \Onfido\Model\DocumentBreakdownPoliceRecord|null
     */
    public function getPoliceRecord()
    {
        return $this->container['police_record'];
    }

    /**
     * Sets police_record
     *
     * @param \Onfido\Model\DocumentBreakdownPoliceRecord|null $police_record police_record
     *
     * @return self
     */
    public function setPoliceRecord($police_record)
    {
        if (is_null($police_record)) {
            throw new \InvalidArgumentException('non-nullable police_record cannot be null');
        }
        $this->container['police_record'] = $police_record;

        return $this;
    }

    /**
     * Gets compromised_document
     *
     * @return \Onfido\Model\DocumentBreakdownCompromisedDocument|null
     */
    public function getCompromisedDocument()
    {
        return $this->container['compromised_document'];
    }

    /**
     * Sets compromised_document
     *
     * @param \Onfido\Model\DocumentBreakdownCompromisedDocument|null $compromised_document compromised_document
     *
     * @return self
     */
    public function setCompromisedDocument($compromised_document)
    {
        if (is_null($compromised_document)) {
            throw new \InvalidArgumentException('non-nullable compromised_document cannot be null');
        }
        $this->container['compromised_document'] = $compromised_document;

        return $this;
    }

    /**
     * Gets age_validation
     *
     * @return \Onfido\Model\DocumentBreakdownAgeValidation|null
     */
    public function getAgeValidation()
    {
        return $this->container['age_validation'];
    }

    /**
     * Sets age_validation
     *
     * @param \Onfido\Model\DocumentBreakdownAgeValidation|null $age_validation age_validation
     *
     * @return self
     */
    public function setAgeValidation($age_validation)
    {
        if (is_null($age_validation)) {
            throw new \InvalidArgumentException('non-nullable age_validation cannot be null');
        }
        $this->container['age_validation'] = $age_validation;

        return $this;
    }

    /**
     * Gets issuing_authority
     *
     * @return \Onfido\Model\DocumentBreakdownIssuingAuthority|null
     */
    public function getIssuingAuthority()
    {
        return $this->container['issuing_authority'];
    }

    /**
     * Sets issuing_authority
     *
     * @param \Onfido\Model\DocumentBreakdownIssuingAuthority|null $issuing_authority issuing_authority
     *
     * @return self
     */
    public function setIssuingAuthority($issuing_authority)
    {
        if (is_null($issuing_authority)) {
            throw new \InvalidArgumentException('non-nullable issuing_authority cannot be null');
        }
        $this->container['issuing_authority'] = $issuing_authority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


