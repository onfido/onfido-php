<?php
/**
 * UsDrivingLicenceBreakdownPersonalBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * UsDrivingLicenceBreakdownPersonalBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UsDrivingLicenceBreakdownPersonalBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'us_driving_licence_breakdown_personal_breakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'name_suffix' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'height' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'weight' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'sex_code' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'eye_color' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'date_of_birth' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'last_name' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'middle_name' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'first_name_fuzzy' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'middle_name_fuzzy' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'last_name_fuzzy' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry',
        'middle_initial' => '\Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'name_suffix' => null,
        'height' => null,
        'weight' => null,
        'sex_code' => null,
        'eye_color' => null,
        'date_of_birth' => null,
        'last_name' => null,
        'middle_name' => null,
        'first_name_fuzzy' => null,
        'middle_name_fuzzy' => null,
        'last_name_fuzzy' => null,
        'middle_initial' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
        'name_suffix' => false,
        'height' => false,
        'weight' => false,
        'sex_code' => false,
        'eye_color' => false,
        'date_of_birth' => false,
        'last_name' => false,
        'middle_name' => false,
        'first_name_fuzzy' => false,
        'middle_name_fuzzy' => false,
        'last_name_fuzzy' => false,
        'middle_initial' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first_name',
        'name_suffix' => 'name_suffix',
        'height' => 'height',
        'weight' => 'weight',
        'sex_code' => 'sex_code',
        'eye_color' => 'eye_color',
        'date_of_birth' => 'date_of_birth',
        'last_name' => 'last_name',
        'middle_name' => 'middle_name',
        'first_name_fuzzy' => 'first_name_fuzzy',
        'middle_name_fuzzy' => 'middle_name_fuzzy',
        'last_name_fuzzy' => 'last_name_fuzzy',
        'middle_initial' => 'middle_initial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'name_suffix' => 'setNameSuffix',
        'height' => 'setHeight',
        'weight' => 'setWeight',
        'sex_code' => 'setSexCode',
        'eye_color' => 'setEyeColor',
        'date_of_birth' => 'setDateOfBirth',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'first_name_fuzzy' => 'setFirstNameFuzzy',
        'middle_name_fuzzy' => 'setMiddleNameFuzzy',
        'last_name_fuzzy' => 'setLastNameFuzzy',
        'middle_initial' => 'setMiddleInitial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'name_suffix' => 'getNameSuffix',
        'height' => 'getHeight',
        'weight' => 'getWeight',
        'sex_code' => 'getSexCode',
        'eye_color' => 'getEyeColor',
        'date_of_birth' => 'getDateOfBirth',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'first_name_fuzzy' => 'getFirstNameFuzzy',
        'middle_name_fuzzy' => 'getMiddleNameFuzzy',
        'last_name_fuzzy' => 'getLastNameFuzzy',
        'middle_initial' => 'getMiddleInitial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('name_suffix', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('sex_code', $data ?? [], null);
        $this->setIfExists('eye_color', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('first_name_fuzzy', $data ?? [], null);
        $this->setIfExists('middle_name_fuzzy', $data ?? [], null);
        $this->setIfExists('last_name_fuzzy', $data ?? [], null);
        $this->setIfExists('middle_initial', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets name_suffix
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getNameSuffix()
    {
        return $this->container['name_suffix'];
    }

    /**
     * Sets name_suffix
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $name_suffix name_suffix
     *
     * @return self
     */
    public function setNameSuffix($name_suffix)
    {
        if (is_null($name_suffix)) {
            throw new \InvalidArgumentException('non-nullable name_suffix cannot be null');
        }
        $this->container['name_suffix'] = $name_suffix;

        return $this;
    }

    /**
     * Gets height
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets sex_code
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getSexCode()
    {
        return $this->container['sex_code'];
    }

    /**
     * Sets sex_code
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $sex_code sex_code
     *
     * @return self
     */
    public function setSexCode($sex_code)
    {
        if (is_null($sex_code)) {
            throw new \InvalidArgumentException('non-nullable sex_code cannot be null');
        }
        $this->container['sex_code'] = $sex_code;

        return $this;
    }

    /**
     * Gets eye_color
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getEyeColor()
    {
        return $this->container['eye_color'];
    }

    /**
     * Sets eye_color
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $eye_color eye_color
     *
     * @return self
     */
    public function setEyeColor($eye_color)
    {
        if (is_null($eye_color)) {
            throw new \InvalidArgumentException('non-nullable eye_color cannot be null');
        }
        $this->container['eye_color'] = $eye_color;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets first_name_fuzzy
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getFirstNameFuzzy()
    {
        return $this->container['first_name_fuzzy'];
    }

    /**
     * Sets first_name_fuzzy
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $first_name_fuzzy first_name_fuzzy
     *
     * @return self
     */
    public function setFirstNameFuzzy($first_name_fuzzy)
    {
        if (is_null($first_name_fuzzy)) {
            throw new \InvalidArgumentException('non-nullable first_name_fuzzy cannot be null');
        }
        $this->container['first_name_fuzzy'] = $first_name_fuzzy;

        return $this;
    }

    /**
     * Gets middle_name_fuzzy
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getMiddleNameFuzzy()
    {
        return $this->container['middle_name_fuzzy'];
    }

    /**
     * Sets middle_name_fuzzy
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $middle_name_fuzzy middle_name_fuzzy
     *
     * @return self
     */
    public function setMiddleNameFuzzy($middle_name_fuzzy)
    {
        if (is_null($middle_name_fuzzy)) {
            throw new \InvalidArgumentException('non-nullable middle_name_fuzzy cannot be null');
        }
        $this->container['middle_name_fuzzy'] = $middle_name_fuzzy;

        return $this;
    }

    /**
     * Gets last_name_fuzzy
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getLastNameFuzzy()
    {
        return $this->container['last_name_fuzzy'];
    }

    /**
     * Sets last_name_fuzzy
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $last_name_fuzzy last_name_fuzzy
     *
     * @return self
     */
    public function setLastNameFuzzy($last_name_fuzzy)
    {
        if (is_null($last_name_fuzzy)) {
            throw new \InvalidArgumentException('non-nullable last_name_fuzzy cannot be null');
        }
        $this->container['last_name_fuzzy'] = $last_name_fuzzy;

        return $this;
    }

    /**
     * Gets middle_initial
     *
     * @return \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null
     */
    public function getMiddleInitial()
    {
        return $this->container['middle_initial'];
    }

    /**
     * Sets middle_initial
     *
     * @param \Onfido\Model\DocumentBreakdownDataComparisonBreakdownIssuingCountry|null $middle_initial middle_initial
     *
     * @return self
     */
    public function setMiddleInitial($middle_initial)
    {
        if (is_null($middle_initial)) {
            throw new \InvalidArgumentException('non-nullable middle_initial cannot be null');
        }
        $this->container['middle_initial'] = $middle_initial;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


