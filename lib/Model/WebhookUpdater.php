<?php
/**
 * WebhookUpdater
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * WebhookUpdater Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookUpdater implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhook_updater';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'events' => '\Onfido\Model\WebhookEventType[]',
        'environments' => 'string[]',
        'payload_version' => 'int',
        'oauth_enabled' => 'bool',
        'oauth_server_url' => 'string',
        'oauth_server_client_id' => 'string',
        'oauth_server_client_secret' => 'string',
        'oauth_server_scope' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'events' => null,
        'environments' => null,
        'payload_version' => null,
        'oauth_enabled' => null,
        'oauth_server_url' => null,
        'oauth_server_client_id' => null,
        'oauth_server_client_secret' => null,
        'oauth_server_scope' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'events' => false,
        'environments' => false,
        'payload_version' => false,
        'oauth_enabled' => false,
        'oauth_server_url' => false,
        'oauth_server_client_id' => false,
        'oauth_server_client_secret' => false,
        'oauth_server_scope' => false,
        'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'events' => 'events',
        'environments' => 'environments',
        'payload_version' => 'payload_version',
        'oauth_enabled' => 'oauth_enabled',
        'oauth_server_url' => 'oauth_server_url',
        'oauth_server_client_id' => 'oauth_server_client_id',
        'oauth_server_client_secret' => 'oauth_server_client_secret',
        'oauth_server_scope' => 'oauth_server_scope',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'events' => 'setEvents',
        'environments' => 'setEnvironments',
        'payload_version' => 'setPayloadVersion',
        'oauth_enabled' => 'setOauthEnabled',
        'oauth_server_url' => 'setOauthServerUrl',
        'oauth_server_client_id' => 'setOauthServerClientId',
        'oauth_server_client_secret' => 'setOauthServerClientSecret',
        'oauth_server_scope' => 'setOauthServerScope',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'events' => 'getEvents',
        'environments' => 'getEnvironments',
        'payload_version' => 'getPayloadVersion',
        'oauth_enabled' => 'getOauthEnabled',
        'oauth_server_url' => 'getOauthServerUrl',
        'oauth_server_client_id' => 'getOauthServerClientId',
        'oauth_server_client_secret' => 'getOauthServerClientSecret',
        'oauth_server_scope' => 'getOauthServerScope',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('environments', $data ?? [], null);
        $this->setIfExists('payload_version', $data ?? [], null);
        $this->setIfExists('oauth_enabled', $data ?? [], null);
        $this->setIfExists('oauth_server_url', $data ?? [], null);
        $this->setIfExists('oauth_server_client_id', $data ?? [], null);
        $this->setIfExists('oauth_server_client_secret', $data ?? [], null);
        $this->setIfExists('oauth_server_scope', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Determine if the webhook is active.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Onfido\Model\WebhookEventType[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Onfido\Model\WebhookEventType[]|null $events The events that will be published to the webhook. If the events parameter is omitted all the events will be subscribed.
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return string[]|null
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param string[]|null $environments The environments from which the webhook will receive events. Allowed values are “sandbox” and “live”. If the environments parameter is omitted the webhook will receive events from both environments.
     *
     * @return self
     */
    public function setEnvironments($environments)
    {
        if (is_null($environments)) {
            throw new \InvalidArgumentException('non-nullable environments cannot be null');
        }
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets payload_version
     *
     * @return int|null
     */
    public function getPayloadVersion()
    {
        return $this->container['payload_version'];
    }

    /**
     * Sets payload_version
     *
     * @param int|null $payload_version Webhook version used to control the payload object when sending webhooks.
     *
     * @return self
     */
    public function setPayloadVersion($payload_version)
    {
        if (is_null($payload_version)) {
            throw new \InvalidArgumentException('non-nullable payload_version cannot be null');
        }
        $this->container['payload_version'] = $payload_version;

        return $this;
    }

    /**
     * Gets oauth_enabled
     *
     * @return bool|null
     */
    public function getOauthEnabled()
    {
        return $this->container['oauth_enabled'];
    }

    /**
     * Sets oauth_enabled
     *
     * @param bool|null $oauth_enabled Determines if the webhook will fetch OAuth access tokens to send in the Authorization header.
     *
     * @return self
     */
    public function setOauthEnabled($oauth_enabled)
    {
        if (is_null($oauth_enabled)) {
            throw new \InvalidArgumentException('non-nullable oauth_enabled cannot be null');
        }
        $this->container['oauth_enabled'] = $oauth_enabled;

        return $this;
    }

    /**
     * Gets oauth_server_url
     *
     * @return string|null
     */
    public function getOauthServerUrl()
    {
        return $this->container['oauth_server_url'];
    }

    /**
     * Sets oauth_server_url
     *
     * @param string|null $oauth_server_url The url to fetch the OAuth access token using client credentials grant.
     *
     * @return self
     */
    public function setOauthServerUrl($oauth_server_url)
    {
        if (is_null($oauth_server_url)) {
            throw new \InvalidArgumentException('non-nullable oauth_server_url cannot be null');
        }
        $this->container['oauth_server_url'] = $oauth_server_url;

        return $this;
    }

    /**
     * Gets oauth_server_client_id
     *
     * @return string|null
     */
    public function getOauthServerClientId()
    {
        return $this->container['oauth_server_client_id'];
    }

    /**
     * Sets oauth_server_client_id
     *
     * @param string|null $oauth_server_client_id The client id to authenticate the client credentials grant.
     *
     * @return self
     */
    public function setOauthServerClientId($oauth_server_client_id)
    {
        if (is_null($oauth_server_client_id)) {
            throw new \InvalidArgumentException('non-nullable oauth_server_client_id cannot be null');
        }
        $this->container['oauth_server_client_id'] = $oauth_server_client_id;

        return $this;
    }

    /**
     * Gets oauth_server_client_secret
     *
     * @return string|null
     */
    public function getOauthServerClientSecret()
    {
        return $this->container['oauth_server_client_secret'];
    }

    /**
     * Sets oauth_server_client_secret
     *
     * @param string|null $oauth_server_client_secret The client secret to authenticate the client credentials grant.
     *
     * @return self
     */
    public function setOauthServerClientSecret($oauth_server_client_secret)
    {
        if (is_null($oauth_server_client_secret)) {
            throw new \InvalidArgumentException('non-nullable oauth_server_client_secret cannot be null');
        }
        $this->container['oauth_server_client_secret'] = $oauth_server_client_secret;

        return $this;
    }

    /**
     * Gets oauth_server_scope
     *
     * @return string|null
     */
    public function getOauthServerScope()
    {
        return $this->container['oauth_server_scope'];
    }

    /**
     * Sets oauth_server_scope
     *
     * @param string|null $oauth_server_scope The scopes to be sent when requesting the access token.
     *
     * @return self
     */
    public function setOauthServerScope($oauth_server_scope)
    {
        if (is_null($oauth_server_scope)) {
            throw new \InvalidArgumentException('non-nullable oauth_server_scope cannot be null');
        }
        $this->container['oauth_server_scope'] = $oauth_server_scope;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The url that will listen to notifications (must be https).
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


