<?php
/**
 * DocumentProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * DocumentProperties Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'document_properties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_of_birth' => '\DateTime',
        'date_of_expiry' => '\DateTime',
        'document_numbers' => '\Onfido\Model\DocumentPropertiesDocumentNumbersInner[]',
        'document_type' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'issuing_country' => 'string',
        'last_name' => 'string',
        'nationality' => 'string',
        'issuing_state' => 'string',
        'issuing_date' => '\DateTime',
        'categorisation' => 'string',
        'mrz_line1' => 'string',
        'mrz_line2' => 'string',
        'mrz_line3' => 'string',
        'address' => 'string',
        'place_of_birth' => 'string',
        'spouse_name' => 'string',
        'widow_name' => 'string',
        'alias_name' => 'string',
        'issuing_authority' => 'string',
        'real_id_compliance' => 'bool',
        'address_lines' => '\Onfido\Model\DocumentPropertiesAddressLines',
        'barcode' => '\Onfido\Model\DocumentPropertiesBarcodeInner[]',
        'nfc' => '\Onfido\Model\DocumentPropertiesNfc',
        'driving_licence_information' => '\Onfido\Model\DocumentPropertiesDrivingLicenceInformation',
        'document_classification' => '\Onfido\Model\DocumentPropertiesDocumentClassification',
        'extracted_data' => '\Onfido\Model\DocumentPropertiesExtractedData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_of_birth' => 'date',
        'date_of_expiry' => 'date',
        'document_numbers' => null,
        'document_type' => null,
        'first_name' => null,
        'gender' => null,
        'issuing_country' => null,
        'last_name' => null,
        'nationality' => null,
        'issuing_state' => null,
        'issuing_date' => 'date',
        'categorisation' => null,
        'mrz_line1' => null,
        'mrz_line2' => null,
        'mrz_line3' => null,
        'address' => null,
        'place_of_birth' => null,
        'spouse_name' => null,
        'widow_name' => null,
        'alias_name' => null,
        'issuing_authority' => null,
        'real_id_compliance' => null,
        'address_lines' => null,
        'barcode' => null,
        'nfc' => null,
        'driving_licence_information' => null,
        'document_classification' => null,
        'extracted_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_of_birth' => false,
        'date_of_expiry' => false,
        'document_numbers' => false,
        'document_type' => false,
        'first_name' => false,
        'gender' => false,
        'issuing_country' => false,
        'last_name' => false,
        'nationality' => false,
        'issuing_state' => false,
        'issuing_date' => false,
        'categorisation' => false,
        'mrz_line1' => false,
        'mrz_line2' => false,
        'mrz_line3' => false,
        'address' => false,
        'place_of_birth' => false,
        'spouse_name' => false,
        'widow_name' => false,
        'alias_name' => false,
        'issuing_authority' => false,
        'real_id_compliance' => false,
        'address_lines' => false,
        'barcode' => false,
        'nfc' => false,
        'driving_licence_information' => false,
        'document_classification' => false,
        'extracted_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_of_birth' => 'date_of_birth',
        'date_of_expiry' => 'date_of_expiry',
        'document_numbers' => 'document_numbers',
        'document_type' => 'document_type',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'issuing_country' => 'issuing_country',
        'last_name' => 'last_name',
        'nationality' => 'nationality',
        'issuing_state' => 'issuing_state',
        'issuing_date' => 'issuing_date',
        'categorisation' => 'categorisation',
        'mrz_line1' => 'mrz_line1',
        'mrz_line2' => 'mrz_line2',
        'mrz_line3' => 'mrz_line3',
        'address' => 'address',
        'place_of_birth' => 'place_of_birth',
        'spouse_name' => 'spouse_name',
        'widow_name' => 'widow_name',
        'alias_name' => 'alias_name',
        'issuing_authority' => 'issuing_authority',
        'real_id_compliance' => 'real_id_compliance',
        'address_lines' => 'address_lines',
        'barcode' => 'barcode',
        'nfc' => 'nfc',
        'driving_licence_information' => 'driving_licence_information',
        'document_classification' => 'document_classification',
        'extracted_data' => 'extracted_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_of_birth' => 'setDateOfBirth',
        'date_of_expiry' => 'setDateOfExpiry',
        'document_numbers' => 'setDocumentNumbers',
        'document_type' => 'setDocumentType',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'issuing_country' => 'setIssuingCountry',
        'last_name' => 'setLastName',
        'nationality' => 'setNationality',
        'issuing_state' => 'setIssuingState',
        'issuing_date' => 'setIssuingDate',
        'categorisation' => 'setCategorisation',
        'mrz_line1' => 'setMrzLine1',
        'mrz_line2' => 'setMrzLine2',
        'mrz_line3' => 'setMrzLine3',
        'address' => 'setAddress',
        'place_of_birth' => 'setPlaceOfBirth',
        'spouse_name' => 'setSpouseName',
        'widow_name' => 'setWidowName',
        'alias_name' => 'setAliasName',
        'issuing_authority' => 'setIssuingAuthority',
        'real_id_compliance' => 'setRealIdCompliance',
        'address_lines' => 'setAddressLines',
        'barcode' => 'setBarcode',
        'nfc' => 'setNfc',
        'driving_licence_information' => 'setDrivingLicenceInformation',
        'document_classification' => 'setDocumentClassification',
        'extracted_data' => 'setExtractedData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_of_birth' => 'getDateOfBirth',
        'date_of_expiry' => 'getDateOfExpiry',
        'document_numbers' => 'getDocumentNumbers',
        'document_type' => 'getDocumentType',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'issuing_country' => 'getIssuingCountry',
        'last_name' => 'getLastName',
        'nationality' => 'getNationality',
        'issuing_state' => 'getIssuingState',
        'issuing_date' => 'getIssuingDate',
        'categorisation' => 'getCategorisation',
        'mrz_line1' => 'getMrzLine1',
        'mrz_line2' => 'getMrzLine2',
        'mrz_line3' => 'getMrzLine3',
        'address' => 'getAddress',
        'place_of_birth' => 'getPlaceOfBirth',
        'spouse_name' => 'getSpouseName',
        'widow_name' => 'getWidowName',
        'alias_name' => 'getAliasName',
        'issuing_authority' => 'getIssuingAuthority',
        'real_id_compliance' => 'getRealIdCompliance',
        'address_lines' => 'getAddressLines',
        'barcode' => 'getBarcode',
        'nfc' => 'getNfc',
        'driving_licence_information' => 'getDrivingLicenceInformation',
        'document_classification' => 'getDocumentClassification',
        'extracted_data' => 'getExtractedData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('date_of_expiry', $data ?? [], null);
        $this->setIfExists('document_numbers', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('issuing_country', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('issuing_state', $data ?? [], null);
        $this->setIfExists('issuing_date', $data ?? [], null);
        $this->setIfExists('categorisation', $data ?? [], null);
        $this->setIfExists('mrz_line1', $data ?? [], null);
        $this->setIfExists('mrz_line2', $data ?? [], null);
        $this->setIfExists('mrz_line3', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('place_of_birth', $data ?? [], null);
        $this->setIfExists('spouse_name', $data ?? [], null);
        $this->setIfExists('widow_name', $data ?? [], null);
        $this->setIfExists('alias_name', $data ?? [], null);
        $this->setIfExists('issuing_authority', $data ?? [], null);
        $this->setIfExists('real_id_compliance', $data ?? [], null);
        $this->setIfExists('address_lines', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('nfc', $data ?? [], null);
        $this->setIfExists('driving_licence_information', $data ?? [], null);
        $this->setIfExists('document_classification', $data ?? [], null);
        $this->setIfExists('extracted_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets date_of_expiry
     *
     * @return \DateTime|null
     */
    public function getDateOfExpiry()
    {
        return $this->container['date_of_expiry'];
    }

    /**
     * Sets date_of_expiry
     *
     * @param \DateTime|null $date_of_expiry date_of_expiry
     *
     * @return self
     */
    public function setDateOfExpiry($date_of_expiry)
    {
        if (is_null($date_of_expiry)) {
            throw new \InvalidArgumentException('non-nullable date_of_expiry cannot be null');
        }
        $this->container['date_of_expiry'] = $date_of_expiry;

        return $this;
    }

    /**
     * Gets document_numbers
     *
     * @return \Onfido\Model\DocumentPropertiesDocumentNumbersInner[]|null
     */
    public function getDocumentNumbers()
    {
        return $this->container['document_numbers'];
    }

    /**
     * Sets document_numbers
     *
     * @param \Onfido\Model\DocumentPropertiesDocumentNumbersInner[]|null $document_numbers document_numbers
     *
     * @return self
     */
    public function setDocumentNumbers($document_numbers)
    {
        if (is_null($document_numbers)) {
            throw new \InvalidArgumentException('non-nullable document_numbers cannot be null');
        }
        $this->container['document_numbers'] = $document_numbers;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets issuing_country
     *
     * @return string|null
     */
    public function getIssuingCountry()
    {
        return $this->container['issuing_country'];
    }

    /**
     * Sets issuing_country
     *
     * @param string|null $issuing_country issuing_country
     *
     * @return self
     */
    public function setIssuingCountry($issuing_country)
    {
        if (is_null($issuing_country)) {
            throw new \InvalidArgumentException('non-nullable issuing_country cannot be null');
        }
        $this->container['issuing_country'] = $issuing_country;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets issuing_state
     *
     * @return string|null
     */
    public function getIssuingState()
    {
        return $this->container['issuing_state'];
    }

    /**
     * Sets issuing_state
     *
     * @param string|null $issuing_state issuing_state
     *
     * @return self
     */
    public function setIssuingState($issuing_state)
    {
        if (is_null($issuing_state)) {
            throw new \InvalidArgumentException('non-nullable issuing_state cannot be null');
        }
        $this->container['issuing_state'] = $issuing_state;

        return $this;
    }

    /**
     * Gets issuing_date
     *
     * @return \DateTime|null
     */
    public function getIssuingDate()
    {
        return $this->container['issuing_date'];
    }

    /**
     * Sets issuing_date
     *
     * @param \DateTime|null $issuing_date issuing_date
     *
     * @return self
     */
    public function setIssuingDate($issuing_date)
    {
        if (is_null($issuing_date)) {
            throw new \InvalidArgumentException('non-nullable issuing_date cannot be null');
        }
        $this->container['issuing_date'] = $issuing_date;

        return $this;
    }

    /**
     * Gets categorisation
     *
     * @return string|null
     */
    public function getCategorisation()
    {
        return $this->container['categorisation'];
    }

    /**
     * Sets categorisation
     *
     * @param string|null $categorisation categorisation
     *
     * @return self
     */
    public function setCategorisation($categorisation)
    {
        if (is_null($categorisation)) {
            throw new \InvalidArgumentException('non-nullable categorisation cannot be null');
        }
        $this->container['categorisation'] = $categorisation;

        return $this;
    }

    /**
     * Gets mrz_line1
     *
     * @return string|null
     */
    public function getMrzLine1()
    {
        return $this->container['mrz_line1'];
    }

    /**
     * Sets mrz_line1
     *
     * @param string|null $mrz_line1 mrz_line1
     *
     * @return self
     */
    public function setMrzLine1($mrz_line1)
    {
        if (is_null($mrz_line1)) {
            throw new \InvalidArgumentException('non-nullable mrz_line1 cannot be null');
        }
        $this->container['mrz_line1'] = $mrz_line1;

        return $this;
    }

    /**
     * Gets mrz_line2
     *
     * @return string|null
     */
    public function getMrzLine2()
    {
        return $this->container['mrz_line2'];
    }

    /**
     * Sets mrz_line2
     *
     * @param string|null $mrz_line2 mrz_line2
     *
     * @return self
     */
    public function setMrzLine2($mrz_line2)
    {
        if (is_null($mrz_line2)) {
            throw new \InvalidArgumentException('non-nullable mrz_line2 cannot be null');
        }
        $this->container['mrz_line2'] = $mrz_line2;

        return $this;
    }

    /**
     * Gets mrz_line3
     *
     * @return string|null
     */
    public function getMrzLine3()
    {
        return $this->container['mrz_line3'];
    }

    /**
     * Sets mrz_line3
     *
     * @param string|null $mrz_line3 mrz_line3
     *
     * @return self
     */
    public function setMrzLine3($mrz_line3)
    {
        if (is_null($mrz_line3)) {
            throw new \InvalidArgumentException('non-nullable mrz_line3 cannot be null');
        }
        $this->container['mrz_line3'] = $mrz_line3;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets place_of_birth
     *
     * @return string|null
     */
    public function getPlaceOfBirth()
    {
        return $this->container['place_of_birth'];
    }

    /**
     * Sets place_of_birth
     *
     * @param string|null $place_of_birth place_of_birth
     *
     * @return self
     */
    public function setPlaceOfBirth($place_of_birth)
    {
        if (is_null($place_of_birth)) {
            throw new \InvalidArgumentException('non-nullable place_of_birth cannot be null');
        }
        $this->container['place_of_birth'] = $place_of_birth;

        return $this;
    }

    /**
     * Gets spouse_name
     *
     * @return string|null
     */
    public function getSpouseName()
    {
        return $this->container['spouse_name'];
    }

    /**
     * Sets spouse_name
     *
     * @param string|null $spouse_name spouse_name
     *
     * @return self
     */
    public function setSpouseName($spouse_name)
    {
        if (is_null($spouse_name)) {
            throw new \InvalidArgumentException('non-nullable spouse_name cannot be null');
        }
        $this->container['spouse_name'] = $spouse_name;

        return $this;
    }

    /**
     * Gets widow_name
     *
     * @return string|null
     */
    public function getWidowName()
    {
        return $this->container['widow_name'];
    }

    /**
     * Sets widow_name
     *
     * @param string|null $widow_name widow_name
     *
     * @return self
     */
    public function setWidowName($widow_name)
    {
        if (is_null($widow_name)) {
            throw new \InvalidArgumentException('non-nullable widow_name cannot be null');
        }
        $this->container['widow_name'] = $widow_name;

        return $this;
    }

    /**
     * Gets alias_name
     *
     * @return string|null
     */
    public function getAliasName()
    {
        return $this->container['alias_name'];
    }

    /**
     * Sets alias_name
     *
     * @param string|null $alias_name alias_name
     *
     * @return self
     */
    public function setAliasName($alias_name)
    {
        if (is_null($alias_name)) {
            throw new \InvalidArgumentException('non-nullable alias_name cannot be null');
        }
        $this->container['alias_name'] = $alias_name;

        return $this;
    }

    /**
     * Gets issuing_authority
     *
     * @return string|null
     */
    public function getIssuingAuthority()
    {
        return $this->container['issuing_authority'];
    }

    /**
     * Sets issuing_authority
     *
     * @param string|null $issuing_authority issuing_authority
     *
     * @return self
     */
    public function setIssuingAuthority($issuing_authority)
    {
        if (is_null($issuing_authority)) {
            throw new \InvalidArgumentException('non-nullable issuing_authority cannot be null');
        }
        $this->container['issuing_authority'] = $issuing_authority;

        return $this;
    }

    /**
     * Gets real_id_compliance
     *
     * @return bool|null
     */
    public function getRealIdCompliance()
    {
        return $this->container['real_id_compliance'];
    }

    /**
     * Sets real_id_compliance
     *
     * @param bool|null $real_id_compliance real_id_compliance
     *
     * @return self
     */
    public function setRealIdCompliance($real_id_compliance)
    {
        if (is_null($real_id_compliance)) {
            throw new \InvalidArgumentException('non-nullable real_id_compliance cannot be null');
        }
        $this->container['real_id_compliance'] = $real_id_compliance;

        return $this;
    }

    /**
     * Gets address_lines
     *
     * @return \Onfido\Model\DocumentPropertiesAddressLines|null
     */
    public function getAddressLines()
    {
        return $this->container['address_lines'];
    }

    /**
     * Sets address_lines
     *
     * @param \Onfido\Model\DocumentPropertiesAddressLines|null $address_lines address_lines
     *
     * @return self
     */
    public function setAddressLines($address_lines)
    {
        if (is_null($address_lines)) {
            throw new \InvalidArgumentException('non-nullable address_lines cannot be null');
        }
        $this->container['address_lines'] = $address_lines;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return \Onfido\Model\DocumentPropertiesBarcodeInner[]|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param \Onfido\Model\DocumentPropertiesBarcodeInner[]|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets nfc
     *
     * @return \Onfido\Model\DocumentPropertiesNfc|null
     */
    public function getNfc()
    {
        return $this->container['nfc'];
    }

    /**
     * Sets nfc
     *
     * @param \Onfido\Model\DocumentPropertiesNfc|null $nfc nfc
     *
     * @return self
     */
    public function setNfc($nfc)
    {
        if (is_null($nfc)) {
            throw new \InvalidArgumentException('non-nullable nfc cannot be null');
        }
        $this->container['nfc'] = $nfc;

        return $this;
    }

    /**
     * Gets driving_licence_information
     *
     * @return \Onfido\Model\DocumentPropertiesDrivingLicenceInformation|null
     */
    public function getDrivingLicenceInformation()
    {
        return $this->container['driving_licence_information'];
    }

    /**
     * Sets driving_licence_information
     *
     * @param \Onfido\Model\DocumentPropertiesDrivingLicenceInformation|null $driving_licence_information driving_licence_information
     *
     * @return self
     */
    public function setDrivingLicenceInformation($driving_licence_information)
    {
        if (is_null($driving_licence_information)) {
            throw new \InvalidArgumentException('non-nullable driving_licence_information cannot be null');
        }
        $this->container['driving_licence_information'] = $driving_licence_information;

        return $this;
    }

    /**
     * Gets document_classification
     *
     * @return \Onfido\Model\DocumentPropertiesDocumentClassification|null
     */
    public function getDocumentClassification()
    {
        return $this->container['document_classification'];
    }

    /**
     * Sets document_classification
     *
     * @param \Onfido\Model\DocumentPropertiesDocumentClassification|null $document_classification document_classification
     *
     * @return self
     */
    public function setDocumentClassification($document_classification)
    {
        if (is_null($document_classification)) {
            throw new \InvalidArgumentException('non-nullable document_classification cannot be null');
        }
        $this->container['document_classification'] = $document_classification;

        return $this;
    }

    /**
     * Gets extracted_data
     *
     * @return \Onfido\Model\DocumentPropertiesExtractedData|null
     */
    public function getExtractedData()
    {
        return $this->container['extracted_data'];
    }

    /**
     * Sets extracted_data
     *
     * @param \Onfido\Model\DocumentPropertiesExtractedData|null $extracted_data extracted_data
     *
     * @return self
     */
    public function setExtractedData($extracted_data)
    {
        if (is_null($extracted_data)) {
            throw new \InvalidArgumentException('non-nullable extracted_data cannot be null');
        }
        $this->container['extracted_data'] = $extracted_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


