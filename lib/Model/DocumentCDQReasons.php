<?php
/**
 * DocumentCDQReasons
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * DocumentCDQReasons Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentCDQReasons implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'document_CDQ_reasons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'obscured_data_points' => 'string',
        'obscured_security_features' => 'string',
        'abnormal_document_features' => 'string',
        'watermarks_digital_text_overlay' => 'string',
        'corner_removed' => 'string',
        'punctured_document' => 'string',
        'missing_back' => 'string',
        'digital_document' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'obscured_data_points' => null,
        'obscured_security_features' => null,
        'abnormal_document_features' => null,
        'watermarks_digital_text_overlay' => null,
        'corner_removed' => null,
        'punctured_document' => null,
        'missing_back' => null,
        'digital_document' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'obscured_data_points' => false,
        'obscured_security_features' => false,
        'abnormal_document_features' => false,
        'watermarks_digital_text_overlay' => false,
        'corner_removed' => false,
        'punctured_document' => false,
        'missing_back' => false,
        'digital_document' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'obscured_data_points' => 'obscured_data_points',
        'obscured_security_features' => 'obscured_security_features',
        'abnormal_document_features' => 'abnormal_document_features',
        'watermarks_digital_text_overlay' => 'watermarks_digital_text_overlay',
        'corner_removed' => 'corner_removed',
        'punctured_document' => 'punctured_document',
        'missing_back' => 'missing_back',
        'digital_document' => 'digital_document'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'obscured_data_points' => 'setObscuredDataPoints',
        'obscured_security_features' => 'setObscuredSecurityFeatures',
        'abnormal_document_features' => 'setAbnormalDocumentFeatures',
        'watermarks_digital_text_overlay' => 'setWatermarksDigitalTextOverlay',
        'corner_removed' => 'setCornerRemoved',
        'punctured_document' => 'setPuncturedDocument',
        'missing_back' => 'setMissingBack',
        'digital_document' => 'setDigitalDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'obscured_data_points' => 'getObscuredDataPoints',
        'obscured_security_features' => 'getObscuredSecurityFeatures',
        'abnormal_document_features' => 'getAbnormalDocumentFeatures',
        'watermarks_digital_text_overlay' => 'getWatermarksDigitalTextOverlay',
        'corner_removed' => 'getCornerRemoved',
        'punctured_document' => 'getPuncturedDocument',
        'missing_back' => 'getMissingBack',
        'digital_document' => 'getDigitalDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('obscured_data_points', $data ?? [], null);
        $this->setIfExists('obscured_security_features', $data ?? [], null);
        $this->setIfExists('abnormal_document_features', $data ?? [], null);
        $this->setIfExists('watermarks_digital_text_overlay', $data ?? [], null);
        $this->setIfExists('corner_removed', $data ?? [], null);
        $this->setIfExists('punctured_document', $data ?? [], null);
        $this->setIfExists('missing_back', $data ?? [], null);
        $this->setIfExists('digital_document', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets obscured_data_points
     *
     * @return string|null
     */
    public function getObscuredDataPoints()
    {
        return $this->container['obscured_data_points'];
    }

    /**
     * Sets obscured_data_points
     *
     * @param string|null $obscured_data_points When data points are obscured to the point that we cannot confirm if the fonts match the expected ones.
     *
     * @return self
     */
    public function setObscuredDataPoints($obscured_data_points)
    {
        if (is_null($obscured_data_points)) {
            throw new \InvalidArgumentException('non-nullable obscured_data_points cannot be null');
        }
        $this->container['obscured_data_points'] = $obscured_data_points;

        return $this;
    }

    /**
     * Gets obscured_security_features
     *
     * @return string|null
     */
    public function getObscuredSecurityFeatures()
    {
        return $this->container['obscured_security_features'];
    }

    /**
     * Sets obscured_security_features
     *
     * @param string|null $obscured_security_features When a critical security feature is obscured. This can also refer to when the holder's wet signature, necessary for the document to be valid, is not present.
     *
     * @return self
     */
    public function setObscuredSecurityFeatures($obscured_security_features)
    {
        if (is_null($obscured_security_features)) {
            throw new \InvalidArgumentException('non-nullable obscured_security_features cannot be null');
        }
        $this->container['obscured_security_features'] = $obscured_security_features;

        return $this;
    }

    /**
     * Gets abnormal_document_features
     *
     * @return string|null
     */
    public function getAbnormalDocumentFeatures()
    {
        return $this->container['abnormal_document_features'];
    }

    /**
     * Sets abnormal_document_features
     *
     * @param string|null $abnormal_document_features One of 3 reasons (1) OCR Assisted Scans (i.e. when you're able to move the mouse and highlight part of text), (2) Severely Washed out Background, (3) Overlapping Text.
     *
     * @return self
     */
    public function setAbnormalDocumentFeatures($abnormal_document_features)
    {
        if (is_null($abnormal_document_features)) {
            throw new \InvalidArgumentException('non-nullable abnormal_document_features cannot be null');
        }
        $this->container['abnormal_document_features'] = $abnormal_document_features;

        return $this;
    }

    /**
     * Gets watermarks_digital_text_overlay
     *
     * @return string|null
     */
    public function getWatermarksDigitalTextOverlay()
    {
        return $this->container['watermarks_digital_text_overlay'];
    }

    /**
     * Sets watermarks_digital_text_overlay
     *
     * @param string|null $watermarks_digital_text_overlay Any digital text or electronic watermarks on the document.
     *
     * @return self
     */
    public function setWatermarksDigitalTextOverlay($watermarks_digital_text_overlay)
    {
        if (is_null($watermarks_digital_text_overlay)) {
            throw new \InvalidArgumentException('non-nullable watermarks_digital_text_overlay cannot be null');
        }
        $this->container['watermarks_digital_text_overlay'] = $watermarks_digital_text_overlay;

        return $this;
    }

    /**
     * Gets corner_removed
     *
     * @return string|null
     */
    public function getCornerRemoved()
    {
        return $this->container['corner_removed'];
    }

    /**
     * Sets corner_removed
     *
     * @param string|null $corner_removed If the corner has been physically cut off. This can be found on some documents that are no longer valid.
     *
     * @return self
     */
    public function setCornerRemoved($corner_removed)
    {
        if (is_null($corner_removed)) {
            throw new \InvalidArgumentException('non-nullable corner_removed cannot be null');
        }
        $this->container['corner_removed'] = $corner_removed;

        return $this;
    }

    /**
     * Gets punctured_document
     *
     * @return string|null
     */
    public function getPuncturedDocument()
    {
        return $this->container['punctured_document'];
    }

    /**
     * Sets punctured_document
     *
     * @param string|null $punctured_document A punched hole is present.
     *
     * @return self
     */
    public function setPuncturedDocument($punctured_document)
    {
        if (is_null($punctured_document)) {
            throw new \InvalidArgumentException('non-nullable punctured_document cannot be null');
        }
        $this->container['punctured_document'] = $punctured_document;

        return $this;
    }

    /**
     * Gets missing_back
     *
     * @return string|null
     */
    public function getMissingBack()
    {
        return $this->container['missing_back'];
    }

    /**
     * Sets missing_back
     *
     * @param string|null $missing_back When the back of a document is needed for processing, but is not available.
     *
     * @return self
     */
    public function setMissingBack($missing_back)
    {
        if (is_null($missing_back)) {
            throw new \InvalidArgumentException('non-nullable missing_back cannot be null');
        }
        $this->container['missing_back'] = $missing_back;

        return $this;
    }

    /**
     * Gets digital_document
     *
     * @return string|null
     */
    public function getDigitalDocument()
    {
        return $this->container['digital_document'];
    }

    /**
     * Sets digital_document
     *
     * @param string|null $digital_document When a document has been published digitally, there aren't enough security features to review so we cannot perform a full fraud assessment.
     *
     * @return self
     */
    public function setDigitalDocument($digital_document)
    {
        if (is_null($digital_document)) {
            throw new \InvalidArgumentException('non-nullable digital_document cannot be null');
        }
        $this->container['digital_document'] = $digital_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


