<?php
/**
 * DocumentIQReasons
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * DocumentIQReasons Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentIQReasons implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'document_IQ_reasons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dark_photo' => 'string',
        'glare_on_photo' => 'string',
        'blurred_photo' => 'string',
        'covered_photo' => 'string',
        'other_photo_issue' => 'string',
        'damaged_document' => 'string',
        'incorrect_side' => 'string',
        'cut_off_document' => 'string',
        'no_document_in_image' => 'string',
        'two_documents_uploaded' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dark_photo' => null,
        'glare_on_photo' => null,
        'blurred_photo' => null,
        'covered_photo' => null,
        'other_photo_issue' => null,
        'damaged_document' => null,
        'incorrect_side' => null,
        'cut_off_document' => null,
        'no_document_in_image' => null,
        'two_documents_uploaded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dark_photo' => false,
        'glare_on_photo' => false,
        'blurred_photo' => false,
        'covered_photo' => false,
        'other_photo_issue' => false,
        'damaged_document' => false,
        'incorrect_side' => false,
        'cut_off_document' => false,
        'no_document_in_image' => false,
        'two_documents_uploaded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dark_photo' => 'dark_photo',
        'glare_on_photo' => 'glare_on_photo',
        'blurred_photo' => 'blurred_photo',
        'covered_photo' => 'covered_photo',
        'other_photo_issue' => 'other_photo_issue',
        'damaged_document' => 'damaged_document',
        'incorrect_side' => 'incorrect_side',
        'cut_off_document' => 'cut_off_document',
        'no_document_in_image' => 'no_document_in_image',
        'two_documents_uploaded' => 'two_documents_uploaded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dark_photo' => 'setDarkPhoto',
        'glare_on_photo' => 'setGlareOnPhoto',
        'blurred_photo' => 'setBlurredPhoto',
        'covered_photo' => 'setCoveredPhoto',
        'other_photo_issue' => 'setOtherPhotoIssue',
        'damaged_document' => 'setDamagedDocument',
        'incorrect_side' => 'setIncorrectSide',
        'cut_off_document' => 'setCutOffDocument',
        'no_document_in_image' => 'setNoDocumentInImage',
        'two_documents_uploaded' => 'setTwoDocumentsUploaded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dark_photo' => 'getDarkPhoto',
        'glare_on_photo' => 'getGlareOnPhoto',
        'blurred_photo' => 'getBlurredPhoto',
        'covered_photo' => 'getCoveredPhoto',
        'other_photo_issue' => 'getOtherPhotoIssue',
        'damaged_document' => 'getDamagedDocument',
        'incorrect_side' => 'getIncorrectSide',
        'cut_off_document' => 'getCutOffDocument',
        'no_document_in_image' => 'getNoDocumentInImage',
        'two_documents_uploaded' => 'getTwoDocumentsUploaded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dark_photo', $data ?? [], null);
        $this->setIfExists('glare_on_photo', $data ?? [], null);
        $this->setIfExists('blurred_photo', $data ?? [], null);
        $this->setIfExists('covered_photo', $data ?? [], null);
        $this->setIfExists('other_photo_issue', $data ?? [], null);
        $this->setIfExists('damaged_document', $data ?? [], null);
        $this->setIfExists('incorrect_side', $data ?? [], null);
        $this->setIfExists('cut_off_document', $data ?? [], null);
        $this->setIfExists('no_document_in_image', $data ?? [], null);
        $this->setIfExists('two_documents_uploaded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dark_photo
     *
     * @return string|null
     */
    public function getDarkPhoto()
    {
        return $this->container['dark_photo'];
    }

    /**
     * Sets dark_photo
     *
     * @param string|null $dark_photo When an image of the document is too dark to be able to see data points.
     *
     * @return self
     */
    public function setDarkPhoto($dark_photo)
    {
        if (is_null($dark_photo)) {
            throw new \InvalidArgumentException('non-nullable dark_photo cannot be null');
        }
        $this->container['dark_photo'] = $dark_photo;

        return $this;
    }

    /**
     * Gets glare_on_photo
     *
     * @return string|null
     */
    public function getGlareOnPhoto()
    {
        return $this->container['glare_on_photo'];
    }

    /**
     * Sets glare_on_photo
     *
     * @param string|null $glare_on_photo When there is light reflecting on the document causing glare to obstruct data points.
     *
     * @return self
     */
    public function setGlareOnPhoto($glare_on_photo)
    {
        if (is_null($glare_on_photo)) {
            throw new \InvalidArgumentException('non-nullable glare_on_photo cannot be null');
        }
        $this->container['glare_on_photo'] = $glare_on_photo;

        return $this;
    }

    /**
     * Gets blurred_photo
     *
     * @return string|null
     */
    public function getBlurredPhoto()
    {
        return $this->container['blurred_photo'];
    }

    /**
     * Sets blurred_photo
     *
     * @param string|null $blurred_photo When data points are blurred and no reference can be made elsewhere in the document or if the data points are too blurry and 'they could be something else'.
     *
     * @return self
     */
    public function setBlurredPhoto($blurred_photo)
    {
        if (is_null($blurred_photo)) {
            throw new \InvalidArgumentException('non-nullable blurred_photo cannot be null');
        }
        $this->container['blurred_photo'] = $blurred_photo;

        return $this;
    }

    /**
     * Gets covered_photo
     *
     * @return string|null
     */
    public function getCoveredPhoto()
    {
        return $this->container['covered_photo'];
    }

    /**
     * Sets covered_photo
     *
     * @param string|null $covered_photo When data points have been covered either by the applicant or by another object such as a sticker.
     *
     * @return self
     */
    public function setCoveredPhoto($covered_photo)
    {
        if (is_null($covered_photo)) {
            throw new \InvalidArgumentException('non-nullable covered_photo cannot be null');
        }
        $this->container['covered_photo'] = $covered_photo;

        return $this;
    }

    /**
     * Gets other_photo_issue
     *
     * @return string|null
     */
    public function getOtherPhotoIssue()
    {
        return $this->container['other_photo_issue'];
    }

    /**
     * Sets other_photo_issue
     *
     * @param string|null $other_photo_issue Any other reason not listed, such as when holograms are obscuring data points.
     *
     * @return self
     */
    public function setOtherPhotoIssue($other_photo_issue)
    {
        if (is_null($other_photo_issue)) {
            throw new \InvalidArgumentException('non-nullable other_photo_issue cannot be null');
        }
        $this->container['other_photo_issue'] = $other_photo_issue;

        return $this;
    }

    /**
     * Gets damaged_document
     *
     * @return string|null
     */
    public function getDamagedDocument()
    {
        return $this->container['damaged_document'];
    }

    /**
     * Sets damaged_document
     *
     * @param string|null $damaged_document When a document is damaged and we are unable to make out data points.
     *
     * @return self
     */
    public function setDamagedDocument($damaged_document)
    {
        if (is_null($damaged_document)) {
            throw new \InvalidArgumentException('non-nullable damaged_document cannot be null');
        }
        $this->container['damaged_document'] = $damaged_document;

        return $this;
    }

    /**
     * Gets incorrect_side
     *
     * @return string|null
     */
    public function getIncorrectSide()
    {
        return $this->container['incorrect_side'];
    }

    /**
     * Sets incorrect_side
     *
     * @param string|null $incorrect_side When the incorrect side of a document has been uploaded, and we have not received the front.
     *
     * @return self
     */
    public function setIncorrectSide($incorrect_side)
    {
        if (is_null($incorrect_side)) {
            throw new \InvalidArgumentException('non-nullable incorrect_side cannot be null');
        }
        $this->container['incorrect_side'] = $incorrect_side;

        return $this;
    }

    /**
     * Gets cut_off_document
     *
     * @return string|null
     */
    public function getCutOffDocument()
    {
        return $this->container['cut_off_document'];
    }

    /**
     * Sets cut_off_document
     *
     * @param string|null $cut_off_document When data points are not included in the image due to the document being cut off.
     *
     * @return self
     */
    public function setCutOffDocument($cut_off_document)
    {
        if (is_null($cut_off_document)) {
            throw new \InvalidArgumentException('non-nullable cut_off_document cannot be null');
        }
        $this->container['cut_off_document'] = $cut_off_document;

        return $this;
    }

    /**
     * Gets no_document_in_image
     *
     * @return string|null
     */
    public function getNoDocumentInImage()
    {
        return $this->container['no_document_in_image'];
    }

    /**
     * Sets no_document_in_image
     *
     * @param string|null $no_document_in_image If no document has been uploaded or there is a blank image.
     *
     * @return self
     */
    public function setNoDocumentInImage($no_document_in_image)
    {
        if (is_null($no_document_in_image)) {
            throw new \InvalidArgumentException('non-nullable no_document_in_image cannot be null');
        }
        $this->container['no_document_in_image'] = $no_document_in_image;

        return $this;
    }

    /**
     * Gets two_documents_uploaded
     *
     * @return string|null
     */
    public function getTwoDocumentsUploaded()
    {
        return $this->container['two_documents_uploaded'];
    }

    /**
     * Sets two_documents_uploaded
     *
     * @param string|null $two_documents_uploaded When 2 different documents are submitted in the same check.
     *
     * @return self
     */
    public function setTwoDocumentsUploaded($two_documents_uploaded)
    {
        if (is_null($two_documents_uploaded)) {
            throw new \InvalidArgumentException('non-nullable two_documents_uploaded cannot be null');
        }
        $this->container['two_documents_uploaded'] = $two_documents_uploaded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


