<?php
/**
 * DeviceIntelligenceBreakdownPropertiesDevice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API v3.6
 *
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * DeviceIntelligenceBreakdownPropertiesDevice Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeviceIntelligenceBreakdownPropertiesDevice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'device_intelligence_breakdown_properties_device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sdk_version' => 'string',
        'sdk_source' => 'string',
        'authentication_type' => 'string',
        'raw_model' => 'string',
        'os' => 'string',
        'browser' => 'string',
        'emulator' => 'bool',
        'randomized_device' => 'bool',
        'fake_network_request' => 'bool',
        'ip_reputation' => 'string',
        'device_fingerprint_reuse' => 'int',
        'single_device_used' => 'bool',
        'document_capture' => 'string',
        'biometric_capture' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sdk_version' => null,
        'sdk_source' => null,
        'authentication_type' => null,
        'raw_model' => null,
        'os' => null,
        'browser' => null,
        'emulator' => null,
        'randomized_device' => null,
        'fake_network_request' => null,
        'ip_reputation' => null,
        'device_fingerprint_reuse' => null,
        'single_device_used' => null,
        'document_capture' => null,
        'biometric_capture' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sdk_version' => false,
        'sdk_source' => false,
        'authentication_type' => false,
        'raw_model' => false,
        'os' => false,
        'browser' => false,
        'emulator' => false,
        'randomized_device' => false,
        'fake_network_request' => false,
        'ip_reputation' => false,
        'device_fingerprint_reuse' => false,
        'single_device_used' => true,
        'document_capture' => false,
        'biometric_capture' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sdk_version' => 'sdk_version',
        'sdk_source' => 'sdk_source',
        'authentication_type' => 'authentication_type',
        'raw_model' => 'raw_model',
        'os' => 'os',
        'browser' => 'browser',
        'emulator' => 'emulator',
        'randomized_device' => 'randomized_device',
        'fake_network_request' => 'fake_network_request',
        'ip_reputation' => 'ip_reputation',
        'device_fingerprint_reuse' => 'device_fingerprint_reuse',
        'single_device_used' => 'single_device_used',
        'document_capture' => 'document_capture',
        'biometric_capture' => 'biometric_capture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sdk_version' => 'setSdkVersion',
        'sdk_source' => 'setSdkSource',
        'authentication_type' => 'setAuthenticationType',
        'raw_model' => 'setRawModel',
        'os' => 'setOs',
        'browser' => 'setBrowser',
        'emulator' => 'setEmulator',
        'randomized_device' => 'setRandomizedDevice',
        'fake_network_request' => 'setFakeNetworkRequest',
        'ip_reputation' => 'setIpReputation',
        'device_fingerprint_reuse' => 'setDeviceFingerprintReuse',
        'single_device_used' => 'setSingleDeviceUsed',
        'document_capture' => 'setDocumentCapture',
        'biometric_capture' => 'setBiometricCapture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sdk_version' => 'getSdkVersion',
        'sdk_source' => 'getSdkSource',
        'authentication_type' => 'getAuthenticationType',
        'raw_model' => 'getRawModel',
        'os' => 'getOs',
        'browser' => 'getBrowser',
        'emulator' => 'getEmulator',
        'randomized_device' => 'getRandomizedDevice',
        'fake_network_request' => 'getFakeNetworkRequest',
        'ip_reputation' => 'getIpReputation',
        'device_fingerprint_reuse' => 'getDeviceFingerprintReuse',
        'single_device_used' => 'getSingleDeviceUsed',
        'document_capture' => 'getDocumentCapture',
        'biometric_capture' => 'getBiometricCapture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SDK_SOURCE_ANDROID_SDK = 'onfido-android-sdk';
    public const SDK_SOURCE_IOS_SDK = 'onfido-ios-sdk';
    public const SDK_SOURCE_WEB_SDK = 'onfido-web-sdk';
    public const SDK_SOURCE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const AUTHENTICATION_TYPE_SDK_TOKEN = 'sdk_token';
    public const AUTHENTICATION_TYPE_MOBILE_TOKEN = 'mobile_token';
    public const AUTHENTICATION_TYPE_API_TOKEN = 'api_token';
    public const AUTHENTICATION_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const IP_REPUTATION_NOT_ENOUGH_DATA = 'NOT_ENOUGH_DATA';
    public const IP_REPUTATION_HIGH_RISK = 'HIGH_RISK';
    public const IP_REPUTATION_LOW_RISK = 'LOW_RISK';
    public const IP_REPUTATION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const DOCUMENT_CAPTURE_LIVE = 'live';
    public const DOCUMENT_CAPTURE_UNKNOWN_METHOD = 'unknown_method';
    public const DOCUMENT_CAPTURE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const BIOMETRIC_CAPTURE_LIVE = 'live';
    public const BIOMETRIC_CAPTURE_UNKNOWN_METHOD = 'unknown_method';
    public const BIOMETRIC_CAPTURE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdkSourceAllowableValues()
    {
        return [
            self::SDK_SOURCE_ANDROID_SDK,
            self::SDK_SOURCE_IOS_SDK,
            self::SDK_SOURCE_WEB_SDK,
            self::SDK_SOURCE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_SDK_TOKEN,
            self::AUTHENTICATION_TYPE_MOBILE_TOKEN,
            self::AUTHENTICATION_TYPE_API_TOKEN,
            self::AUTHENTICATION_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpReputationAllowableValues()
    {
        return [
            self::IP_REPUTATION_NOT_ENOUGH_DATA,
            self::IP_REPUTATION_HIGH_RISK,
            self::IP_REPUTATION_LOW_RISK,
            self::IP_REPUTATION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentCaptureAllowableValues()
    {
        return [
            self::DOCUMENT_CAPTURE_LIVE,
            self::DOCUMENT_CAPTURE_UNKNOWN_METHOD,
            self::DOCUMENT_CAPTURE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBiometricCaptureAllowableValues()
    {
        return [
            self::BIOMETRIC_CAPTURE_LIVE,
            self::BIOMETRIC_CAPTURE_UNKNOWN_METHOD,
            self::BIOMETRIC_CAPTURE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sdk_version', $data ?? [], null);
        $this->setIfExists('sdk_source', $data ?? [], null);
        $this->setIfExists('authentication_type', $data ?? [], null);
        $this->setIfExists('raw_model', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('browser', $data ?? [], null);
        $this->setIfExists('emulator', $data ?? [], null);
        $this->setIfExists('randomized_device', $data ?? [], null);
        $this->setIfExists('fake_network_request', $data ?? [], null);
        $this->setIfExists('ip_reputation', $data ?? [], null);
        $this->setIfExists('device_fingerprint_reuse', $data ?? [], null);
        $this->setIfExists('single_device_used', $data ?? [], null);
        $this->setIfExists('document_capture', $data ?? [], null);
        $this->setIfExists('biometric_capture', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSdkSourceAllowableValues();
        if (!is_null($this->container['sdk_source']) && !in_array($this->container['sdk_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdk_source', must be one of '%s'",
                $this->container['sdk_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($this->container['authentication_type']) && !in_array($this->container['authentication_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication_type', must be one of '%s'",
                $this->container['authentication_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpReputationAllowableValues();
        if (!is_null($this->container['ip_reputation']) && !in_array($this->container['ip_reputation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_reputation', must be one of '%s'",
                $this->container['ip_reputation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentCaptureAllowableValues();
        if (!is_null($this->container['document_capture']) && !in_array($this->container['document_capture'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_capture', must be one of '%s'",
                $this->container['document_capture'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBiometricCaptureAllowableValues();
        if (!is_null($this->container['biometric_capture']) && !in_array($this->container['biometric_capture'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'biometric_capture', must be one of '%s'",
                $this->container['biometric_capture'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sdk_version
     *
     * @return string|null
     */
    public function getSdkVersion()
    {
        return $this->container['sdk_version'];
    }

    /**
     * Sets sdk_version
     *
     * @param string|null $sdk_version The SDK version that was used.
     *
     * @return self
     */
    public function setSdkVersion($sdk_version)
    {
        if (is_null($sdk_version)) {
            throw new \InvalidArgumentException('non-nullable sdk_version cannot be null');
        }
        $this->container['sdk_version'] = $sdk_version;

        return $this;
    }

    /**
     * Gets sdk_source
     *
     * @return string|null
     */
    public function getSdkSource()
    {
        return $this->container['sdk_source'];
    }

    /**
     * Sets sdk_source
     *
     * @param string|null $sdk_source The SDK used to upload the media.
     *
     * @return self
     */
    public function setSdkSource($sdk_source)
    {
        if (is_null($sdk_source)) {
            throw new \InvalidArgumentException('non-nullable sdk_source cannot be null');
        }
        $allowedValues = $this->getSdkSourceAllowableValues();
        if (!in_array($sdk_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdk_source', must be one of '%s'",
                    $sdk_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdk_source'] = $sdk_source;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string|null
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string|null $authentication_type The token used to authenticate the request.
     *
     * @return self
     */
    public function setAuthenticationType($authentication_type)
    {
        if (is_null($authentication_type)) {
            throw new \InvalidArgumentException('non-nullable authentication_type cannot be null');
        }
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!in_array($authentication_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication_type', must be one of '%s'",
                    $authentication_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets raw_model
     *
     * @return string|null
     */
    public function getRawModel()
    {
        return $this->container['raw_model'];
    }

    /**
     * Sets raw_model
     *
     * @param string|null $raw_model The model as set by the phone manufacturer (for Android and iOS) or the browser manufacturer (for Web). The model can be presented in name or number form depending on each manufacturer implementation.
     *
     * @return self
     */
    public function setRawModel($raw_model)
    {
        if (is_null($raw_model)) {
            throw new \InvalidArgumentException('non-nullable raw_model cannot be null');
        }
        $this->container['raw_model'] = $raw_model;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os The operating system of the device. The value came from manufacturer implementation (for Android and iOS) or browser's user agent (for Web).
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets browser
     *
     * @return string|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser
     *
     * @param string|null $browser The browser name reported by the browser's user agent.
     *
     * @return self
     */
    public function setBrowser($browser)
    {
        if (is_null($browser)) {
            throw new \InvalidArgumentException('non-nullable browser cannot be null');
        }
        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets emulator
     *
     * @return bool|null
     */
    public function getEmulator()
    {
        return $this->container['emulator'];
    }

    /**
     * Sets emulator
     *
     * @param bool|null $emulator Whether the device is an emulator.
     *
     * @return self
     */
    public function setEmulator($emulator)
    {
        if (is_null($emulator)) {
            throw new \InvalidArgumentException('non-nullable emulator cannot be null');
        }
        $this->container['emulator'] = $emulator;

        return $this;
    }

    /**
     * Gets randomized_device
     *
     * @return bool|null
     */
    public function getRandomizedDevice()
    {
        return $this->container['randomized_device'];
    }

    /**
     * Sets randomized_device
     *
     * @param bool|null $randomized_device Whether the device is providing false randomized device and network information.
     *
     * @return self
     */
    public function setRandomizedDevice($randomized_device)
    {
        if (is_null($randomized_device)) {
            throw new \InvalidArgumentException('non-nullable randomized_device cannot be null');
        }
        $this->container['randomized_device'] = $randomized_device;

        return $this;
    }

    /**
     * Gets fake_network_request
     *
     * @return bool|null
     */
    public function getFakeNetworkRequest()
    {
        return $this->container['fake_network_request'];
    }

    /**
     * Sets fake_network_request
     *
     * @param bool|null $fake_network_request Whether device is using stolen security tokens to send the network information.
     *
     * @return self
     */
    public function setFakeNetworkRequest($fake_network_request)
    {
        if (is_null($fake_network_request)) {
            throw new \InvalidArgumentException('non-nullable fake_network_request cannot be null');
        }
        $this->container['fake_network_request'] = $fake_network_request;

        return $this;
    }

    /**
     * Gets ip_reputation
     *
     * @return string|null
     */
    public function getIpReputation()
    {
        return $this->container['ip_reputation'];
    }

    /**
     * Sets ip_reputation
     *
     * @param string|null $ip_reputation Whether there is highly suspicious traffic related to the IP address. The risk depends on the overall ratio of clear checks on a given IP.
     *
     * @return self
     */
    public function setIpReputation($ip_reputation)
    {
        if (is_null($ip_reputation)) {
            throw new \InvalidArgumentException('non-nullable ip_reputation cannot be null');
        }
        $allowedValues = $this->getIpReputationAllowableValues();
        if (!in_array($ip_reputation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_reputation', must be one of '%s'",
                    $ip_reputation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_reputation'] = $ip_reputation;

        return $this;
    }

    /**
     * Gets device_fingerprint_reuse
     *
     * @return int|null
     */
    public function getDeviceFingerprintReuse()
    {
        return $this->container['device_fingerprint_reuse'];
    }

    /**
     * Sets device_fingerprint_reuse
     *
     * @param int|null $device_fingerprint_reuse The number of times the device was used to create a report for a new applicant. A value greater than 1 indicates potential device reuse.
     *
     * @return self
     */
    public function setDeviceFingerprintReuse($device_fingerprint_reuse)
    {
        if (is_null($device_fingerprint_reuse)) {
            throw new \InvalidArgumentException('non-nullable device_fingerprint_reuse cannot be null');
        }
        $this->container['device_fingerprint_reuse'] = $device_fingerprint_reuse;

        return $this;
    }

    /**
     * Gets single_device_used
     *
     * @return bool|null
     */
    public function getSingleDeviceUsed()
    {
        return $this->container['single_device_used'];
    }

    /**
     * Sets single_device_used
     *
     * @param bool|null $single_device_used Whether the document or biometric media were uploaded from a single device.
     *
     * @return self
     */
    public function setSingleDeviceUsed($single_device_used)
    {
        if (is_null($single_device_used)) {
            array_push($this->openAPINullablesSetToNull, 'single_device_used');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('single_device_used', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['single_device_used'] = $single_device_used;

        return $this;
    }

    /**
     * Gets document_capture
     *
     * @return string|null
     */
    public function getDocumentCapture()
    {
        return $this->container['document_capture'];
    }

    /**
     * Sets document_capture
     *
     * @param string|null $document_capture Whether the document media were live captured from the device camera.
     *
     * @return self
     */
    public function setDocumentCapture($document_capture)
    {
        if (is_null($document_capture)) {
            throw new \InvalidArgumentException('non-nullable document_capture cannot be null');
        }
        $allowedValues = $this->getDocumentCaptureAllowableValues();
        if (!in_array($document_capture, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_capture', must be one of '%s'",
                    $document_capture,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_capture'] = $document_capture;

        return $this;
    }

    /**
     * Gets biometric_capture
     *
     * @return string|null
     */
    public function getBiometricCapture()
    {
        return $this->container['biometric_capture'];
    }

    /**
     * Sets biometric_capture
     *
     * @param string|null $biometric_capture Whether the biometric media were live captured from the device camera.
     *
     * @return self
     */
    public function setBiometricCapture($biometric_capture)
    {
        if (is_null($biometric_capture)) {
            throw new \InvalidArgumentException('non-nullable biometric_capture cannot be null');
        }
        $allowedValues = $this->getBiometricCaptureAllowableValues();
        if (!in_array($biometric_capture, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'biometric_capture', must be one of '%s'",
                    $biometric_capture,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['biometric_capture'] = $biometric_capture;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


